// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetForemost.Infrastructure.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NetForemost.Infrastructure.Migrations.Migrations
{
    [DbContext(typeof(NetForemostContext))]
    [Migration("20230822214520_renamePriorityLevelTranslation")]
    partial class renamePriorityLevelTranslation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.AppClients.AppClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("ApiKey")
                        .HasColumnType("uuid")
                        .HasColumnName("api_key");

                    b.Property<string>("AppName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("app_name");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("client_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_app_client");

                    b.ToTable("app_client", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Benefits.Benefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_benefit");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_benefit_company_id");

                    b.ToTable("benefit", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Billings.BillingHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountsNumber")
                        .HasColumnType("integer")
                        .HasColumnName("accounts_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.Property<double>("SubscriptionPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("subscription_price");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_type_id");

                    b.Property<double>("TotalBilling")
                        .HasColumnType("double precision")
                        .HasColumnName("total_billing");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_billing_history");

                    b.HasIndex("SubscriptionId")
                        .HasDatabaseName("ix_billing_history_subscription_id");

                    b.HasIndex("SubscriptionTypeId")
                        .HasDatabaseName("ix_billing_history_subscription_type_id");

                    b.ToTable("billing_history", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Billings.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_feature");

                    b.ToTable("feature", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Billings.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_subscription");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_subscription_company_id");

                    b.HasIndex("SubscriptionTypeId")
                        .HasDatabaseName("ix_subscription_subscription_type_id");

                    b.ToTable("subscription", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Billings.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_subscription_type");

                    b.ToTable("subscription_type", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Billings.SubscriptionTypeFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer")
                        .HasColumnName("feature_id");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_subscription_type_feature");

                    b.HasIndex("FeatureId")
                        .HasDatabaseName("ix_subscription_type_feature_feature_id");

                    b.HasIndex("SubscriptionTypeId")
                        .HasDatabaseName("ix_subscription_type_feature_subscription_type_id");

                    b.ToTable("subscription_type_feature", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Companies.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("text")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasColumnType("text")
                        .HasColumnName("address2");

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("CompanyImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("company_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int?>("EmployeesNumber")
                        .HasColumnType("integer")
                        .HasColumnName("employees_number");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("integer")
                        .HasColumnName("industry_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("State")
                        .HasColumnType("boolean")
                        .HasColumnName("state");

                    b.Property<int>("TimeZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("time_zone_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_company");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_company_city_id");

                    b.HasIndex("IndustryId")
                        .HasDatabaseName("ix_company_industry_id");

                    b.HasIndex("TimeZoneId")
                        .HasDatabaseName("ix_company_time_zone_id");

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Companies.CompanySettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowManagersCreateProjects")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_managers_create_projects");

                    b.Property<bool>("AllowManagersInviteNewUsers")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_managers_invite_new_users");

                    b.Property<bool>("AllowManagersSetUpWorkSchedules")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_managers_set_up_work_schedules");

                    b.Property<bool>("AutoStartTracking")
                        .HasColumnType("boolean")
                        .HasColumnName("auto_start_tracking");

                    b.Property<int>("BlurScreenshots")
                        .HasColumnType("integer")
                        .HasColumnName("blur_screenshots");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("DontTimeOutOnCalls")
                        .HasColumnType("integer")
                        .HasColumnName("dont_time_out_on_calls");

                    b.Property<int>("FirstDayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("first_day_of_week");

                    b.Property<int>("TrackingType")
                        .HasColumnType("integer")
                        .HasColumnName("tracking_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<bool>("UsePlayroll")
                        .HasColumnType("boolean")
                        .HasColumnName("use_playroll");

                    b.Property<bool>("UseWorkSchedules")
                        .HasColumnType("boolean")
                        .HasColumnName("use_work_schedules");

                    b.Property<bool>("UserProjectsTasks")
                        .HasColumnType("boolean")
                        .HasColumnName("user_projects_tasks");

                    b.HasKey("Id")
                        .HasName("pk_company_settings");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_company_settings_company_id");

                    b.ToTable("company_settings", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Companies.CompanyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("JobOfferId")
                        .HasColumnType("integer")
                        .HasColumnName("job_offer_id");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_company_user");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_company_user_company_id");

                    b.HasIndex("JobOfferId")
                        .HasDatabaseName("ix_company_user_job_offer_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_company_user_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_company_user_user_id");

                    b.ToTable("company_user", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.ContractTypes.ContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_contract_type");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_contract_type_company_id");

                    b.ToTable("contract_type", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Countries.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iso_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_city_country_id");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Countries.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("iso_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OfficialName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("official_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Goals.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actual_end_date");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double>("EstimatedHours")
                        .HasColumnType("double precision")
                        .HasColumnName("estimated_hours");

                    b.Property<int?>("GoalStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("goal_status_id");

                    b.Property<bool>("HasExtraMileGoal")
                        .HasColumnType("boolean")
                        .HasColumnName("has_extra_mile_goal");

                    b.Property<string>("JiraTicketId")
                        .HasColumnType("text")
                        .HasColumnName("jira_ticket_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<int>("PriorityLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("priority_level_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("ScrumMasterId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scrum_master_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("StoryPointId")
                        .HasColumnType("integer")
                        .HasColumnName("story_point_id");

                    b.Property<DateTime>("TargetEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("target_end_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_goal");

                    b.HasIndex("GoalStatusId")
                        .HasDatabaseName("ix_goal_goal_status_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_goal_owner_id");

                    b.HasIndex("PriorityLevelId")
                        .HasDatabaseName("ix_goal_priority_level_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_goal_project_id");

                    b.HasIndex("ScrumMasterId")
                        .HasDatabaseName("ix_goal_scrum_master_id");

                    b.HasIndex("StoryPointId")
                        .HasDatabaseName("ix_goal_story_point_id");

                    b.ToTable("goal", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Goals.GoalExtraMile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("actual_end_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("ExtraMileTargetEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("extra_mile_target_end_date");

                    b.Property<int>("GoalId")
                        .HasColumnType("integer")
                        .HasColumnName("goal_id");

                    b.Property<int?>("GoalStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("goal_status_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsVoided")
                        .HasColumnType("boolean")
                        .HasColumnName("is_voided");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_goal_extra_mile");

                    b.HasIndex("GoalId")
                        .IsUnique()
                        .HasDatabaseName("ix_goal_extra_mile_goal_id");

                    b.HasIndex("GoalStatusId")
                        .HasDatabaseName("ix_goal_extra_mile_goal_status_id");

                    b.ToTable("goal_extra_mile", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Goals.GoalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("StatusCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("status_category_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_goal_status");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_goal_status_company_id");

                    b.HasIndex("StatusCategoryId")
                        .HasDatabaseName("ix_goal_status_status_category_id");

                    b.ToTable("goal_status", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Goals.GoalStatusCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_goal_status_category");

                    b.ToTable("goal_status_category", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Groups.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_group");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_group_company_id");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Groups.GroupUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_group_user");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_group_user_group_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_group_user_user_id");

                    b.ToTable("group_user", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Industries.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_industry");

                    b.ToTable("industry", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobOffers.JobOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DateExpiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_expiration");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_job_offer");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_job_offer_city_id");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_job_offer_company_id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_job_offer_country_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_job_offer_project_id");

                    b.ToTable("job_offer", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobOffers.JobOfferBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BenefitId")
                        .HasColumnType("integer")
                        .HasColumnName("benefit_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("JobOfferId")
                        .HasColumnType("integer")
                        .HasColumnName("job_offer_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_job_offer_benefit");

                    b.HasIndex("BenefitId")
                        .HasDatabaseName("ix_job_offer_benefit_benefit_id");

                    b.HasIndex("JobOfferId")
                        .HasDatabaseName("ix_job_offer_benefit_job_offer_id");

                    b.ToTable("job_offer_benefit", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobOffers.JobOfferTalent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("contract_type_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("JobOfferId")
                        .HasColumnType("integer")
                        .HasColumnName("job_offer_id");

                    b.Property<int>("JobRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("job_role_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<int>("LanguageLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("language_level_id");

                    b.Property<int>("PolicyId")
                        .HasColumnType("integer")
                        .HasColumnName("policy_id");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("responsibilities");

                    b.Property<int>("SeniorityId")
                        .HasColumnType("integer")
                        .HasColumnName("seniority_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int>("Vacancie")
                        .HasColumnType("integer")
                        .HasColumnName("vacancie");

                    b.HasKey("Id")
                        .HasName("pk_job_offer_talent");

                    b.HasIndex("ContractTypeId")
                        .HasDatabaseName("ix_job_offer_talent_contract_type_id");

                    b.HasIndex("JobOfferId")
                        .HasDatabaseName("ix_job_offer_talent_job_offer_id");

                    b.HasIndex("JobRoleId")
                        .HasDatabaseName("ix_job_offer_talent_job_role_id");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_job_offer_talent_language_id");

                    b.HasIndex("LanguageLevelId")
                        .HasDatabaseName("ix_job_offer_talent_language_level_id");

                    b.HasIndex("PolicyId")
                        .HasDatabaseName("ix_job_offer_talent_policy_id");

                    b.HasIndex("SeniorityId")
                        .HasDatabaseName("ix_job_offer_talent_seniority_id");

                    b.ToTable("job_offer_talent", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobOffers.JobOfferTalentSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("JobOfferTalentId")
                        .HasColumnType("integer")
                        .HasColumnName("job_offer_talent_id");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer")
                        .HasColumnName("skill_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_job_offer_talent_skill");

                    b.HasIndex("JobOfferTalentId")
                        .HasDatabaseName("ix_job_offer_talent_skill_job_offer_talent_id");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("ix_job_offer_talent_skill_skill_id");

                    b.ToTable("job_offer_talent_skill", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<int>("JobRoleCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("job_role_category_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_job_role");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_job_role_company_id");

                    b.HasIndex("JobRoleCategoryId")
                        .HasDatabaseName("ix_job_role_job_role_category_id");

                    b.ToTable("job_role", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRoleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_job_role_category");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_job_role_category_company_id");

                    b.ToTable("job_role_category", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRoleCategorySkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("JobRoleCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("job_role_category_id");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer")
                        .HasColumnName("skill_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_job_role_category_skill");

                    b.HasIndex("JobRoleCategoryId")
                        .HasDatabaseName("ix_job_role_category_skill_job_role_category_id");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("ix_job_role_category_skill_skill_id");

                    b.ToTable("job_role_category_skill", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRoleCategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("JobRoleCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("job_role_category_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_job_role_category_translation");

                    b.HasIndex("JobRoleCategoryId")
                        .HasDatabaseName("ix_job_role_category_translation_job_role_category_id");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_job_role_category_translation_language_id");

                    b.ToTable("job_role_category_translation", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRoleTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("JobRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("job_role_id");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_job_role_translation");

                    b.HasIndex("JobRoleId")
                        .HasDatabaseName("ix_job_role_translation_job_role_id");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_job_role_translation_language_id");

                    b.ToTable("job_role_translation", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Languages.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_language");

                    b.ToTable("language", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Languages.LanguageLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_language_level");

                    b.ToTable("language_level", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Languages.UserLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<int>("LanguageLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("language_level_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_language");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_user_language_language_id");

                    b.HasIndex("LanguageLevelId")
                        .HasDatabaseName("ix_user_language_language_level_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_language_user_id");

                    b.ToTable("user_language", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Monitorings.AppTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("MonitoringId")
                        .HasColumnType("integer")
                        .HasColumnName("monitoring_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double>("TimeTracked")
                        .HasColumnType("double precision")
                        .HasColumnName("time_tracked");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_app_tracking");

                    b.HasIndex("MonitoringId")
                        .HasDatabaseName("ix_app_tracking_monitoring_id");

                    b.ToTable("app_tracking", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Monitorings.Monitoring", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<double>("KeystrokesMin")
                        .HasColumnType("double precision")
                        .HasColumnName("keystrokes_min");

                    b.Property<double>("MouseMovementsMin")
                        .HasColumnType("double precision")
                        .HasColumnName("mouse_movements_min");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("registered");

                    b.Property<string>("Screenshot")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("screenshot");

                    b.Property<int>("TimeTrackingId")
                        .HasColumnType("integer")
                        .HasColumnName("time_tracking_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_monitoring");

                    b.HasIndex("TimeTrackingId")
                        .HasDatabaseName("ix_monitoring_time_tracking_id");

                    b.ToTable("monitoring", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Policies.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_policy");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_policy_company_id");

                    b.ToTable("policy", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.PriorityLevels.PriorityLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("HexColorCode")
                        .HasColumnType("text")
                        .HasColumnName("hex_color_code");

                    b.Property<string>("Level")
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_priority_level");

                    b.ToTable("priority_level", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.PriorityLevels.PriorityLevelTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("level");

                    b.Property<int>("PriorityLevelId")
                        .HasColumnType("integer")
                        .HasColumnName("priority_level_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_priority_level_translation");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_priority_level_translation_language_id");

                    b.HasIndex("PriorityLevelId")
                        .HasDatabaseName("ix_priority_level_translation_priority_level_id");

                    b.ToTable("priority_level_translation", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float>("Budget")
                        .HasColumnType("real")
                        .HasColumnName("budget");

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndEstimatedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("end_estimated_date");

                    b.Property<int>("EstimatedSize")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_size");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("started_date");

                    b.Property<string[]>("TechStack")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tech_stack");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_project");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_project_company_id");

                    b.ToTable("project", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Projects.ProjectCompanyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyUserId")
                        .HasColumnType("integer")
                        .HasColumnName("company_user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("JobRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("job_role_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_project_company_user");

                    b.HasIndex("CompanyUserId")
                        .HasDatabaseName("ix_project_company_user_company_user_id");

                    b.HasIndex("JobRoleId")
                        .HasDatabaseName("ix_project_company_user_job_role_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_company_user_project_id");

                    b.ToTable("project_company_user", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Projects.ProjectGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_project_group");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_project_group_group_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_group_project_id");

                    b.ToTable("project_group", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Roles.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Roles.RoleTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("language_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_role_translation");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_role_translation_language_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_translation_role_id");

                    b.ToTable("role_translation", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Seniorities.Seniority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_seniority");

                    b.ToTable("seniority", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Skills.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_skill");

                    b.ToTable("skill", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.StoryPoints.StoryPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Dependencies")
                        .HasColumnType("text")
                        .HasColumnName("dependencies");

                    b.Property<string>("KnowledgeLevel")
                        .HasColumnType("text")
                        .HasColumnName("knowledge_level");

                    b.Property<int?>("Points")
                        .HasColumnType("integer")
                        .HasColumnName("points");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("WorkEffort")
                        .HasColumnType("text")
                        .HasColumnName("work_effort");

                    b.HasKey("Id")
                        .HasName("pk_story_point");

                    b.ToTable("story_point", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Tasks.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int?>("GoalId")
                        .HasColumnType("integer")
                        .HasColumnName("goal_id");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTime>("TargetEndDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("target_end_date");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_task");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_task_company_id");

                    b.HasIndex("GoalId")
                        .HasDatabaseName("ix_task_goal_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_task_owner_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_task_project_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_task_type_id");

                    b.ToTable("task", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Tasks.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_task_type");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_task_type_company_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_task_type_project_id");

                    b.ToTable("task_type", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.TimeTrakings.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("device_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_device");

                    b.HasIndex("DeviceTypeId")
                        .HasDatabaseName("ix_device_device_type_id");

                    b.ToTable("device", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.TimeTrakings.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_device_type");

                    b.ToTable("device_type", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.TimeTrakings.TimeTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer")
                        .HasColumnName("device_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("Started")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("started");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.Property<double>("TimeTracked")
                        .HasColumnType("double precision")
                        .HasColumnName("time_tracked");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_time_tracking");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_time_tracking_device_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_time_tracking_task_id");

                    b.ToTable("time_tracking", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.TimeZones.TimeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<double>("Offset")
                        .HasColumnType("double precision")
                        .HasColumnName("offset");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_time_zone");

                    b.ToTable("time_zone", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<int?>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("JobRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("job_role_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("registered");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<int?>("SeniorityId")
                        .HasColumnType("integer")
                        .HasColumnName("seniority_id");

                    b.Property<int?>("TimeZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("time_zone_id");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("user_image_url");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_asp_net_users_city_id");

                    b.HasIndex("JobRoleId")
                        .HasDatabaseName("ix_asp_net_users_job_role_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SeniorityId")
                        .HasDatabaseName("ix_asp_net_users_seniority_id");

                    b.HasIndex("TimeZoneId")
                        .HasDatabaseName("ix_asp_net_users_time_zone_id");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Users.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expiration");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<bool>("Used")
                        .HasColumnType("boolean")
                        .HasColumnName("used");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_user_refresh_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_refresh_token_user_id");

                    b.ToTable("user_refresh_token", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Users.UserSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BlurScreenshots")
                        .HasColumnType("boolean")
                        .HasColumnName("blur_screenshots");

                    b.Property<bool>("CanEditTime")
                        .HasColumnType("boolean")
                        .HasColumnName("can_edit_time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<bool>("DeleteScreencasts")
                        .HasColumnType("boolean")
                        .HasColumnName("delete_screencasts");

                    b.Property<TimeSpan>("ScreencastsFrecuency")
                        .HasColumnType("interval")
                        .HasColumnName("screencasts_frecuency");

                    b.Property<bool>("ShowInReports")
                        .HasColumnType("boolean")
                        .HasColumnName("show_in_reports");

                    b.Property<TimeSpan>("TimeOutAfter")
                        .HasColumnType("interval")
                        .HasColumnName("time_out_after");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_settings");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_settings_user_id");

                    b.ToTable("user_settings", (string)null);
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Users.UserSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer")
                        .HasColumnName("skill_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_skill");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("ix_user_skill_skill_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_skill_user_id");

                    b.ToTable("user_skill", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id");

                    b.HasOne("NetForemost.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Benefits.Benefit", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_benefit_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Billings.BillingHistory", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Billings.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_billing_history_subscriptions_subscription_id");

                    b.HasOne("NetForemost.Core.Entities.Billings.SubscriptionType", "SubscriptionType")
                        .WithMany()
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_billing_history_subscription_types_subscription_type_id");

                    b.Navigation("Subscription");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Billings.Subscription", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_companies_company_id");

                    b.HasOne("NetForemost.Core.Entities.Billings.SubscriptionType", "SubscriptionType")
                        .WithMany()
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_subscription_types_subscription_type_id");

                    b.Navigation("Company");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Billings.SubscriptionTypeFeature", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Billings.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_type_feature_feature_feature_id");

                    b.HasOne("NetForemost.Core.Entities.Billings.SubscriptionType", "SubscriptionType")
                        .WithMany()
                        .HasForeignKey("SubscriptionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subscription_type_feature_subscription_type_subscription_ty");

                    b.Navigation("Feature");

                    b.Navigation("SubscriptionType");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Companies.Company", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Countries.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_cities_city_id");

                    b.HasOne("NetForemost.Core.Entities.Industries.Industry", "Industry")
                        .WithMany("Companies")
                        .HasForeignKey("IndustryId")
                        .HasConstraintName("fk_company_industries_industry_id");

                    b.HasOne("NetForemost.Core.Entities.TimeZones.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_time_zones_time_zone_id");

                    b.Navigation("City");

                    b.Navigation("Industry");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Companies.CompanySettings", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany("CompanySettings")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_settings_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Companies.CompanyUser", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_user_company_company_id");

                    b.HasOne("NetForemost.Core.Entities.JobOffers.JobOffer", "JobOffer")
                        .WithMany()
                        .HasForeignKey("JobOfferId")
                        .HasConstraintName("fk_company_user_job_offer_job_offer_id");

                    b.HasOne("NetForemost.Core.Entities.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_user_roles_role_id");

                    b.HasOne("NetForemost.Core.Entities.Users.User", "User")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_company_user_users_user_id");

                    b.Navigation("Company");

                    b.Navigation("JobOffer");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.ContractTypes.ContractType", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_contract_type_company_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Countries.City", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Countries.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_city_countries_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Goals.Goal", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Goals.GoalStatus", "GoalStatus")
                        .WithMany()
                        .HasForeignKey("GoalStatusId")
                        .HasConstraintName("fk_goal_statuses_goal_status_id");

                    b.HasOne("NetForemost.Core.Entities.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_users_owner_id");

                    b.HasOne("NetForemost.Core.Entities.PriorityLevels.PriorityLevel", "PriorityLevel")
                        .WithMany()
                        .HasForeignKey("PriorityLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_priority_levels_priority_level_id");

                    b.HasOne("NetForemost.Core.Entities.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_projects_project_id");

                    b.HasOne("NetForemost.Core.Entities.Users.User", "ScrumMaster")
                        .WithMany()
                        .HasForeignKey("ScrumMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_users_scrum_master_id");

                    b.HasOne("NetForemost.Core.Entities.StoryPoints.StoryPoint", "StoryPoint")
                        .WithMany()
                        .HasForeignKey("StoryPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_story_points_story_point_id");

                    b.Navigation("GoalStatus");

                    b.Navigation("Owner");

                    b.Navigation("PriorityLevel");

                    b.Navigation("Project");

                    b.Navigation("ScrumMaster");

                    b.Navigation("StoryPoint");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Goals.GoalExtraMile", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Goals.Goal", "Goal")
                        .WithOne("GoalExtraMile")
                        .HasForeignKey("NetForemost.Core.Entities.Goals.GoalExtraMile", "GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_extra_mile_goal_goal_id");

                    b.HasOne("NetForemost.Core.Entities.Goals.GoalStatus", "GoalStatus")
                        .WithMany()
                        .HasForeignKey("GoalStatusId")
                        .HasConstraintName("fk_goal_extra_mile_statuses_goal_status_id");

                    b.Navigation("Goal");

                    b.Navigation("GoalStatus");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Goals.GoalStatus", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_status_company_company_id");

                    b.HasOne("NetForemost.Core.Entities.Goals.GoalStatusCategory", "StatusCategory")
                        .WithMany()
                        .HasForeignKey("StatusCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_goal_status_status_categories_status_category_id");

                    b.Navigation("Company");

                    b.Navigation("StatusCategory");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Groups.Group", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_company_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Groups.GroupUser", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Groups.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_user_group_group_id");

                    b.HasOne("NetForemost.Core.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_user_users_user_id");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobOffers.JobOffer", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Countries.City", "City")
                        .WithMany("JobOffers")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_job_offer_cities_city_id");

                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_companies_company_id");

                    b.HasOne("NetForemost.Core.Entities.Countries.Country", "Country")
                        .WithMany("JobOffers")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_job_offer_countries_country_id");

                    b.HasOne("NetForemost.Core.Entities.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_job_offer_projects_project_id");

                    b.Navigation("City");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobOffers.JobOfferBenefit", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Benefits.Benefit", "Benefit")
                        .WithMany()
                        .HasForeignKey("BenefitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_benefit_benefit_benefit_id");

                    b.HasOne("NetForemost.Core.Entities.JobOffers.JobOffer", "JobOffer")
                        .WithMany("Benefits")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_benefit_job_offer_job_offer_id");

                    b.Navigation("Benefit");

                    b.Navigation("JobOffer");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobOffers.JobOfferTalent", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.ContractTypes.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_talent_contract_type_contract_type_id");

                    b.HasOne("NetForemost.Core.Entities.JobOffers.JobOffer", "JobOffer")
                        .WithMany("Talents")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_talent_job_offer_job_offer_id");

                    b.HasOne("NetForemost.Core.Entities.JobRoles.JobRole", "JobRole")
                        .WithMany("JobOfferJobRoles")
                        .HasForeignKey("JobRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_talent_work_roles_job_role_id");

                    b.HasOne("NetForemost.Core.Entities.Languages.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_talent_languages_language_id");

                    b.HasOne("NetForemost.Core.Entities.Languages.LanguageLevel", "LanguageLevel")
                        .WithMany()
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_talent_language_levels_language_level_id");

                    b.HasOne("NetForemost.Core.Entities.Policies.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_talent_policies_policy_id");

                    b.HasOne("NetForemost.Core.Entities.Seniorities.Seniority", "Seniority")
                        .WithMany("JobOfferJobRoles")
                        .HasForeignKey("SeniorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_talent_seniorities_seniority_id");

                    b.Navigation("ContractType");

                    b.Navigation("JobOffer");

                    b.Navigation("JobRole");

                    b.Navigation("Language");

                    b.Navigation("LanguageLevel");

                    b.Navigation("Policy");

                    b.Navigation("Seniority");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobOffers.JobOfferTalentSkill", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.JobOffers.JobOfferTalent", "JobOfferTalent")
                        .WithMany("JobOfferTalentSkills")
                        .HasForeignKey("JobOfferTalentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_talent_skill_job_offer_talent_job_offer_talent_id");

                    b.HasOne("NetForemost.Core.Entities.Skills.Skill", "Skill")
                        .WithMany("JobOfferJobRoleSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_offer_talent_skill_skills_skill_id");

                    b.Navigation("JobOfferTalent");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRole", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_job_role_company_company_id");

                    b.HasOne("NetForemost.Core.Entities.JobRoles.JobRoleCategory", "JobRoleCategory")
                        .WithMany("JobRoles")
                        .HasForeignKey("JobRoleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_role_work_role_categories_job_role_category_id");

                    b.Navigation("Company");

                    b.Navigation("JobRoleCategory");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRoleCategory", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_job_role_category_company_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRoleCategorySkill", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.JobRoles.JobRoleCategory", "JobRoleCategory")
                        .WithMany("JobRoleCategorySkills")
                        .HasForeignKey("JobRoleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_role_category_skill_job_role_category_job_role_category");

                    b.HasOne("NetForemost.Core.Entities.Skills.Skill", "Skill")
                        .WithMany("JobRoleCategorySkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_role_category_skill_skills_skill_id");

                    b.Navigation("JobRoleCategory");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRoleCategoryTranslation", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.JobRoles.JobRoleCategory", "JobRoleCategory")
                        .WithMany("JobRoleCategoryTranslations")
                        .HasForeignKey("JobRoleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_role_category_translation_job_role_category_job_role_ca");

                    b.HasOne("NetForemost.Core.Entities.Languages.Language", "Language")
                        .WithMany("WorkRoleCategoryTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_role_category_translation_languages_language_id");

                    b.Navigation("JobRoleCategory");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRoleTranslation", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.JobRoles.JobRole", "JobRole")
                        .WithMany("JobRoleTranslations")
                        .HasForeignKey("JobRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_role_translation_job_role_job_role_id");

                    b.HasOne("NetForemost.Core.Entities.Languages.Language", "Language")
                        .WithMany("WorkRoleTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_job_role_translation_languages_language_id");

                    b.Navigation("JobRole");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Languages.UserLanguage", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Languages.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_language_languages_language_id");

                    b.HasOne("NetForemost.Core.Entities.Languages.LanguageLevel", "LanguageLevel")
                        .WithMany()
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_language_language_levels_language_level_id");

                    b.HasOne("NetForemost.Core.Entities.Users.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_language_users_user_id");

                    b.Navigation("Language");

                    b.Navigation("LanguageLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Monitorings.AppTracking", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Monitorings.Monitoring", "Monitoring")
                        .WithMany()
                        .HasForeignKey("MonitoringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_app_tracking_monitorings_monitoring_id");

                    b.Navigation("Monitoring");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Monitorings.Monitoring", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.TimeTrakings.TimeTracking", "TimeTracking")
                        .WithMany()
                        .HasForeignKey("TimeTrackingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_monitoring_time_trackings_time_tracking_id");

                    b.Navigation("TimeTracking");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Policies.Policy", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("fk_policy_company_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.PriorityLevels.PriorityLevelTranslation", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Languages.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_priority_level_translation_language_language_id");

                    b.HasOne("NetForemost.Core.Entities.PriorityLevels.PriorityLevel", "PriorityLevel")
                        .WithMany()
                        .HasForeignKey("PriorityLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_priority_level_translation_priority_level_priority_level_id");

                    b.Navigation("Language");

                    b.Navigation("PriorityLevel");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Projects.Project", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_company_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Projects.ProjectCompanyUser", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.CompanyUser", "CompanyUser")
                        .WithMany("ProjectCompanyUsers")
                        .HasForeignKey("CompanyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_company_user_company_user_company_user_id");

                    b.HasOne("NetForemost.Core.Entities.JobRoles.JobRole", "JobRole")
                        .WithMany()
                        .HasForeignKey("JobRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_company_user_job_role_job_role_id");

                    b.HasOne("NetForemost.Core.Entities.Projects.Project", "Project")
                        .WithMany("ProjectCompanyUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_company_user_project_project_id");

                    b.Navigation("CompanyUser");

                    b.Navigation("JobRole");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Projects.ProjectGroup", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Groups.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_group_group_group_id");

                    b.HasOne("NetForemost.Core.Entities.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_group_project_project_id");

                    b.Navigation("Group");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Roles.RoleTranslation", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Languages.Language", "Language")
                        .WithMany("RoleTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_translation_language_language_id");

                    b.HasOne("NetForemost.Core.Entities.Roles.Role", "Role")
                        .WithMany("RoleTranslations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_translation_role_role_id");

                    b.Navigation("Language");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Tasks.Task", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_company_company_id");

                    b.HasOne("NetForemost.Core.Entities.Goals.Goal", "Goal")
                        .WithMany()
                        .HasForeignKey("GoalId")
                        .HasConstraintName("fk_task_goal_goal_id");

                    b.HasOne("NetForemost.Core.Entities.Users.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_users_owner_id");

                    b.HasOne("NetForemost.Core.Entities.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_project_project_id");

                    b.HasOne("NetForemost.Core.Entities.Tasks.TaskType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_task_types_type_id");

                    b.Navigation("Company");

                    b.Navigation("Goal");

                    b.Navigation("Owner");

                    b.Navigation("Project");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Tasks.TaskType", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Companies.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_type_company_company_id");

                    b.HasOne("NetForemost.Core.Entities.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_type_project_project_id");

                    b.Navigation("Company");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.TimeTrakings.Device", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.TimeTrakings.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_device_device_types_device_type_id");

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.TimeTrakings.TimeTracking", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.TimeTrakings.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_time_tracking_device_device_id");

                    b.HasOne("NetForemost.Core.Entities.Tasks.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_time_tracking_task_task_id");

                    b.Navigation("Device");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Users.User", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Countries.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_asp_net_users_city_city_id");

                    b.HasOne("NetForemost.Core.Entities.JobRoles.JobRole", "JobRole")
                        .WithMany()
                        .HasForeignKey("JobRoleId")
                        .HasConstraintName("fk_asp_net_users_job_role_job_role_id");

                    b.HasOne("NetForemost.Core.Entities.Seniorities.Seniority", "Seniority")
                        .WithMany()
                        .HasForeignKey("SeniorityId")
                        .HasConstraintName("fk_asp_net_users_seniority_seniority_id");

                    b.HasOne("NetForemost.Core.Entities.TimeZones.TimeZone", "TimeZone")
                        .WithMany()
                        .HasForeignKey("TimeZoneId")
                        .HasConstraintName("fk_asp_net_users_time_zone_time_zone_id");

                    b.Navigation("City");

                    b.Navigation("JobRole");

                    b.Navigation("Seniority");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Users.UserRefreshToken", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_refresh_token_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Users.UserSettings", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Users.User", "User")
                        .WithMany("UserSettings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_settings_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Users.UserSkill", b =>
                {
                    b.HasOne("NetForemost.Core.Entities.Skills.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_skill_skill_skill_id");

                    b.HasOne("NetForemost.Core.Entities.Users.User", "User")
                        .WithMany("UserSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_skill_user_user_id");

                    b.Navigation("Skill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Companies.Company", b =>
                {
                    b.Navigation("CompanySettings");

                    b.Navigation("CompanyUsers");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Companies.CompanyUser", b =>
                {
                    b.Navigation("ProjectCompanyUsers");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Countries.City", b =>
                {
                    b.Navigation("JobOffers");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Countries.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("JobOffers");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Goals.Goal", b =>
                {
                    b.Navigation("GoalExtraMile");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Industries.Industry", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobOffers.JobOffer", b =>
                {
                    b.Navigation("Benefits");

                    b.Navigation("Talents");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobOffers.JobOfferTalent", b =>
                {
                    b.Navigation("JobOfferTalentSkills");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRole", b =>
                {
                    b.Navigation("JobOfferJobRoles");

                    b.Navigation("JobRoleTranslations");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.JobRoles.JobRoleCategory", b =>
                {
                    b.Navigation("JobRoleCategorySkills");

                    b.Navigation("JobRoleCategoryTranslations");

                    b.Navigation("JobRoles");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Languages.Language", b =>
                {
                    b.Navigation("RoleTranslations");

                    b.Navigation("WorkRoleCategoryTranslations");

                    b.Navigation("WorkRoleTranslations");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Projects.Project", b =>
                {
                    b.Navigation("ProjectCompanyUsers");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Roles.Role", b =>
                {
                    b.Navigation("RoleTranslations");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Seniorities.Seniority", b =>
                {
                    b.Navigation("JobOfferJobRoles");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Skills.Skill", b =>
                {
                    b.Navigation("JobOfferJobRoleSkills");

                    b.Navigation("JobRoleCategorySkills");
                });

            modelBuilder.Entity("NetForemost.Core.Entities.Users.User", b =>
                {
                    b.Navigation("CompanyUsers");

                    b.Navigation("UserLanguages");

                    b.Navigation("UserSettings");

                    b.Navigation("UserSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
